<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

    <modelVersion>4.0.0</modelVersion>

    <groupId>com.xavier.flink</groupId>
    <artifactId>flink-quick-start</artifactId>
    <packaging>pom</packaging>
    <version>1.9.0</version>

    <modules>
        <module>flink-examples</module>
    </modules>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <hadoop.version>2.4.1</hadoop.version>
        <!-- Need to use a user property here because the surefire
             forkCount is not exposed as a property. With this we can set
             it on the "mvn" commandline in travis. -->
        <flink.forkCount>1C</flink.forkCount>
        <!-- Allow overriding the fork behaviour for the expensive tests in flink-tests
             to avoid process kills due to container limits on TravisCI -->
        <flink.forkCountTestPackage>${flink.forkCount}</flink.forkCountTestPackage>
        <flink.reuseForks>true</flink.reuseForks>
        <log4j.configuration>log4j-test.properties</log4j.configuration>
        <flink.shaded.version>7.0</flink.shaded.version>
        <guava.version>18.0</guava.version>
        <akka.version>2.5.21</akka.version>
        <java.version>1.8</java.version>
        <slf4j.version>1.7.15</slf4j.version>
        <log4j.version>1.2.17</log4j.version>
        <!-- Overwrite default values from parent pom.
             Intellij is (sometimes?) using those values to choose target language level
             and thus is changing back to java 1.6 on each maven re-import -->
        <maven.compiler.source>${java.version}</maven.compiler.source>
        <maven.compiler.target>${java.version}</maven.compiler.target>
        <scala.macros.version>2.1.0</scala.macros.version>
        <!-- Default scala versions, must be overwritten by build profiles, so we set something
        invalid here -->
        <scala.version>2.11.11</scala.version>
        <scala.binary.version>2.11</scala.binary.version>
        <chill.version>0.7.6</chill.version>
        <zookeeper.version>3.4.10</zookeeper.version>
        <curator.version>2.12.0</curator.version>
        <jackson.version>2.9.8</jackson.version>
        <metrics.version>3.1.5</metrics.version>
        <prometheus.version>0.3.0</prometheus.version>
        <avro.version>1.8.2</avro.version>
        <junit.version>4.12</junit.version>
        <mockito.version>2.21.0</mockito.version>
        <powermock.version>2.0.0-RC.4</powermock.version>
        <hamcrest.version>1.3</hamcrest.version>
        <py4j.version>0.10.8.1</py4j.version>
        <japicmp.skip>false</japicmp.skip>
        <flink.convergence.phase>validate</flink.convergence.phase>
        <!--
            Keeping the MiniKDC version fixed instead of taking hadoop version dependency
            to support testing Kafka, ZK etc., modules that does not have Hadoop dependency
            Starting Hadoop 3, org.apache.kerby will be used instead of MiniKDC. We may have
            to revisit the impact at that time.
        -->
        <minikdc.version>2.7.2</minikdc.version>
        <generated.docs.dir>./docs/_includes/generated</generated.docs.dir>
        <hive.version>2.3.4</hive.version>
        <!--
            Hive 2.3.4 relies on Hadoop 2.7.2 and later versions.
            For Hadoop 2.7, the minor Hadoop version supported for flink-shaded-hadoop-2-uber is 2.7.5
        -->
        <hivemetastore.hadoop.version>2.7.5</hivemetastore.hadoop.version>
        <jamicmp.referenceVersion>1.8.0</jamicmp.referenceVersion>
        <japicmp.outputDir>tools/japicmp-output</japicmp.outputDir>
    </properties>

    <dependencies>
        <!-- Root dependencies for all projects -->

        <!-- Logging API -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
        </dependency>

        <!-- test dependencies -->

        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <type>jar</type>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-core</artifactId>
            <version>${mockito.version}</version>
            <type>jar</type>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.powermock</groupId>
            <artifactId>powermock-module-junit4</artifactId>
            <version>${powermock.version}</version>
            <type>jar</type>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.powermock</groupId>
            <artifactId>powermock-api-mockito2</artifactId>
            <version>${powermock.version}</version>
            <type>jar</type>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>org.mockito</groupId>
                    <artifactId>mockito-core</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <!-- tests will have log4j as the default logging framework available -->

        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-log4j12</artifactId>
            <type>jar</type>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>log4j</groupId>
            <artifactId>log4j</artifactId>
            <type>jar</type>
            <scope>test</scope>
        </dependency>

    </dependencies>

    <!-- this section defines the module versions that are used if nothing else is specified. -->
    <dependencyManagement>
        <!-- WARN:
            DO NOT put 	guava,
                        protobuf,
                        asm,
                        netty
                    here. It will overwrite Hadoop's guava dependency (even though we handle it
            separatly in the flink-shaded-hadoop-2 dependency).
        -->
        <dependencies>

            <dependency>
                <groupId>org.apache.flink</groupId>
                <artifactId>flink-shaded-asm-6</artifactId>
                <version>6.2.1-${flink.shaded.version}</version>
            </dependency>

            <dependency>
                <groupId>org.apache.flink</groupId>
                <artifactId>flink-shaded-guava</artifactId>
                <version>18.0-${flink.shaded.version}</version>
            </dependency>

            <!-- This manages the 'javax.annotation' annotations (JSR305) -->
            <dependency>
                <groupId>com.google.code.findbugs</groupId>
                <artifactId>jsr305</artifactId>
                <version>1.3.9</version>
            </dependency>

            <dependency>
                <groupId>org.slf4j</groupId>
                <artifactId>slf4j-api</artifactId>
                <version>${slf4j.version}</version>
            </dependency>

            <dependency>
                <groupId>org.slf4j</groupId>
                <artifactId>slf4j-log4j12</artifactId>
                <version>${slf4j.version}</version>
            </dependency>

            <dependency>
                <groupId>log4j</groupId>
                <artifactId>log4j</artifactId>
                <version>${log4j.version}</version>
            </dependency>

            <dependency>
                <groupId>org.apache.commons</groupId>
                <artifactId>commons-lang3</artifactId>
                <version>3.3.2</version>
            </dependency>

            <dependency>
                <groupId>org.xerial.snappy</groupId>
                <artifactId>snappy-java</artifactId>
                <version>1.1.4</version>
            </dependency>

            <!-- For dependency convergence -->
            <dependency>
                <groupId>org.hamcrest</groupId>
                <artifactId>hamcrest-core</artifactId>
                <version>${hamcrest.version}</version>
            </dependency>


            <!-- For dependency convergence -->
            <dependency>
                <groupId>commons-logging</groupId>
                <artifactId>commons-logging</artifactId>
                <version>1.2</version>
            </dependency>

            <!-- For dependency convergence -->
            <dependency>
                <groupId>junit</groupId>
                <artifactId>junit</artifactId>
                <version>${junit.version}</version>
            </dependency>

            <dependency>
                <groupId>commons-io</groupId>
                <artifactId>commons-io</artifactId>
                <version>2.4</version>
            </dependency>

            <!-- commons collections needs to be pinned to this critical security fix version -->
            <dependency>
                <groupId>commons-collections</groupId>
                <artifactId>commons-collections</artifactId>
                <version>3.2.2</version>
            </dependency>

            <dependency>
                <groupId>org.scala-lang</groupId>
                <artifactId>scala-library</artifactId>
                <version>${scala.version}</version>
            </dependency>

            <dependency>
                <groupId>org.scala-lang</groupId>
                <artifactId>scala-reflect</artifactId>
                <version>${scala.version}</version>
            </dependency>

            <dependency>
                <groupId>org.scala-lang</groupId>
                <artifactId>scala-compiler</artifactId>
                <version>${scala.version}</version>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <build>
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>3.8.0</version>
                    <configuration>
                        <source>${java.version}</source>
                        <target>${java.version}</target>
                        <!-- The semantics of this option are reversed, see MCOMPILER-209. -->
                        <useIncrementalCompilation>false</useIncrementalCompilation>
                        <compilerArgs>
                            <!-- Prevents recompilation due to missing package-info.class, see MCOMPILER-205 -->
                            <arg>-Xpkginfo:always</arg>
                        </compilerArgs>
                    </configuration>
                </plugin>
            </plugins>
        </pluginManagement>
    </build>
</project>
